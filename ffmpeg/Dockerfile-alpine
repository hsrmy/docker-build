# build用コンテナ
FROM alpine:latest AS build

## FFMPEGのバージョン
ARG VERSION=4.3.1
## 開発用パッケージ
ARG DEVELOP_PKG="curl cmake g++ gcc git make musl-dev perl zlib-dev"
## ライブラリをビルドする際に必要なパッケージ
ARG DEPENDENCEY_PKG="autoconf automake diffutils libcap-dev libpciaccess-dev libsndfile-dev libtool mpg123-dev perl portaudio-dev \
    pulseaudio-dev"
## コンパイルに必要なパッケージ
ARG BUILD_PKG=" brotli-dev brotli-static bzip2-dev bzip2-static expat-dev expat-static fontconfig-dev fontconfig-static \
    freetype-dev freetype-static frei0r-plugins-dev fribidi-dev fribidi-static glib-static gsm-dev lame-dev libbz2 \
    libpng-static libsodium-dev libsodium-static libtheora-dev libtheora-static libwebp-dev libwebp-static libva-intel-driver \
    libva-dev libvdpau-dev libxml2-dev libzmq-static mesa-va-gallium mesa-vdpau-gallium nasm openjpeg-dev openssl-dev \
    openssl-libs-static opus-dev speex-dev wavpack-dev x264-dev x265-dev xvidcore-dev xvidcore-static zlib-static zeromq-dev"
## コンパイルに必要なパッケージ (alpine linuxのedgeブランチのcommunityリポジトリにしかないもの)
ARG BUILD_EDGE_COMMUNITY_PKG="intel-media-driver-dev ladspa-dev"
## コンパイルに必要なパッケージ (alpine linuxのedgeブランチのtestingリポジトリにしかないもの)
ARG BUILD_EDGE_TESTING_PKG="libmysofa-dev libva-vdpau-driver shine snappy-dev snappy-static"

## 必要なパッケージのインストール
RUN apk --update --no-cache add ${DEVELOP_PKG} ${DEPENDENCEY_PKG} ${BUILD_PKG} && \
    apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/community ${BUILD_EDGE_COMMUNITY_PKG} && \
    apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing ${BUILD_EDGE_TESTING_PKG}

## 必要なライブラリのコンパイル
### for --enable-avisynth

WORKDIR /tmp/AviSynthPlus
RUN curl -fsSL https://github.com/AviSynth/AviSynthPlus/archive/v3.6.1.tar.gz | tar -xz --strip-components=1 && \
    mkdir avisynth-build && cd avisynth-build && \
    cmake -DCMAKE_BUILD_TYPE=Release ../ -DHEADERS_ONLY:bool=on && \
    make install
### for --enable-libaom
WORKDIR /tmp/aom
RUN git clone https://aomedia.googlesource.com/aom . && \
    mkdir aom-build && cd aom-build && \
    cmake -DBUILD_SHARED_LIBS=0 -DENABLE_TESTS=0 -DENABLE_NASM=on -DCMAKE_INSTALL_LIBDIR=lib .. && \
    make -j$(nproc) install
### for --enable-libbs2b
WORKDIR /tmp/bs2b
RUN curl -fsSL https://downloads.sourceforge.net/project/bs2b/libbs2b/3.1.0/libbs2b-3.1.0.tar.gz | tar -xz --strip-components=1 && \
    cd ./build-aux && \
    curl -fsSL 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -o config.guess && \
    curl -fsSL 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' -o config.sub && \
    cd ../ && \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j $(nproc) install
### for --enable-libopenmpt
WORKDIR /tmp/libmpg123
RUN curl -fdSL http://deb.debian.org/debian/pool/main/m/mpg123/mpg123_1.26.4.orig.tar.bz2 | tar -xj --strip-components=1 && \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j $(nproc) install
WORKDIR /tmp/libopenmpt
RUN curl -fsSL https://lib.openmpt.org/files/libopenmpt/src/libopenmpt-0.5.0+release.autotools.tar.gz | tar -xz --strip-components=1 && \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j $(nproc) install
### for --enable-libtwolame
WORKDIR /tmp/twolame
RUN curl -fsSL https://downloads.sourceforge.net/twolame/twolame-0.4.0.tar.gz | tar -xz --strip-components=1 && \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j $(nproc) install
### for --enable-libvidstab
WORKDIR /tmp/vidstab
RUN curl -fsSL https://github.com/georgmartius/vid.stab/archive/v1.1.0.tar.gz | tar -xz --strip-components=1 && \
    mkdir vidstab-build && cd vidstab-build && \
    cmake -DBUILD_SHARED_LIBS=0 .. && \
    make -j $(nproc) install
### for --enable-libvpx
WORKDIR /tmp/libvpx
RUN curl -fsSL https://github.com/webmproject/libvpx/archive/v1.9.0.tar.gz | tar -xz --strip-components=1 && \
    ./configure --enable-static --enable-vp9-highbitdepth --disable-shared --disable-unit-tests --disable-examples && \
    make -j$(nproc) install
### for --enable-libwavpack
WORKDIR /tmp/libwavpack
RUN curl -fsSL https://github.com/dbry/WavPack/archive/5.3.0.tar.gz | tar -xz --strip-components=1 && \
    ./autogen.sh && \
    ./configure --enable-static --disable-shared && \
    make -j$(nproc) install
### for --enable-libx264
WORKDIR /tmp/x264
RUN git clone https://code.videolan.org/videolan/x264.git . && \
    ./configure --enable-pic --enable-static --disable-shared && \
    make -j$(nproc) install
### for --enable-libx265
WORKDIR /tmp/x265
RUN curl -fsSL https://bitbucket.org/multicoreware/x265_git/get/3.4.tar.bz2 | tar -xj --strip-components=1 && \
    cd build/linux && \
    cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="/usr/local" -DENABLE_SHARED=OFF -DENABLE_AGGRESSIVE_CHECKS=ON ../../source && \
    make -j$(nproc) install
### for --enable-sdl2
WORKDIR /tmp/sdl2
RUN curl -fsSL https://www.libsdl.org/release/SDL2-2.0.12.tar.gz | tar -xz --strip-components=1 && \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j$(nproc) install
### for --enable-vaapi
WORKDIR /tmp/libva
RUN curl -fsSL https://github.com/intel/libva/releases/download/2.10.0/libva-2.10.0.tar.bz2 | tar -xj --strip-components=1 && \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j$(nproc) install

## ffmpegのコンパイル
WORKDIR /tmp/ffmpeg
RUN curl -fsSL https://ffmpeg.org/releases/ffmpeg-${VERSION}.tar.gz | tar -xz --strip-components=1 && \
    curl -fsSL https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/v1.4.18.tar.gz | tar -xz --strip-components=1 && \
    mkdir -p /usr/local/include/AMF && \
    cp -r amf/public/include/* /usr/local/include/AMF && \
    ln -s /usr/lib/libbrotlicommon-static.a /usr/lib/libbrotlicommon.a && \
    ln -s /usr/lib/libbrotlidec-static.a /usr/lib/libbrotlidec.a && \
    sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "/usr/local/lib/pkgconfig/x265.pc" && \
    ./configure --disable-doc --disable-ffplay --disable-filter=resample --disable-rpath --disable-shared --disable-stripping \
    --enable-avisynth --enable-amf --enable-frei0r --enable-gpl --enable-ladspa --enable-libaom --enable-libbs2b \
    --enable-fontconfig --enable-libfreetype --enable-libfribidi --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg \
    --enable-libopenmpt --enable-libopus --enable-libshine --enable-libsnappy --enable-libtheora --enable-libtwolame \
    --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 \
    --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-nonfree --enable-openssl --enable-sdl2 \
    --enable-small --enable-static --enable-vaapi --enable-vdpau --enable-version3 --extra-cflags=--static --extra-libs=-static \
    --pkg-config-flags=--static && \
    make -j $(nproc) && \
    make -j $(nproc) install && \
    make distclean

## 不要なものの削除
WORKDIR /tmp
RUN rm -rf /tmp/* && \
    apk --purge del ${DEVELOP_PKG} ${DEPENDENCEY_PKG} ${BUILD_PKG} ${BUILD_EDGE_COMMUNITY_PKG} ${BUILD_EDGE_TESTING_PKG}

# 実際のコンテナ
FROM alpine:latest

COPY --from=build /usr/local/bin/ffmpeg /usr/local/bin/ffmpeg
COPY --from=build /usr/local/bin/ffprobe /usr/local/bin/ffprobe